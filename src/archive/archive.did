type Value = 
 variant {
   Array: vec Value;
   Blob: blob;
   Int: int;
   Map: vec record {
              text;
              Value;
            };
   Nat: nat;
   Text: text;
 };
type TxIndex = nat;
type TransactionRange = 
 record {
   length: nat;
   start: nat;
 };
type Transaction = 
 variant {
   Array: vec Value;
   Blob: blob;
   Int: int;
   Map: vec record {
              text;
              Value;
            };
   Nat: nat;
   Text: text;
 };
type Stats = 
 record {
   currentOffset: nat64;
   currentPages: nat64;
   itemCount: nat;
   maxPages: nat64;
   memory: record {
             pages: opt nat64;
             type_of: IndexType;
           };
   region: record {
             id: nat;
             size: nat64;
           };
 };
type IndexType = 
 variant {
   Managed;
   Stable;
   StableTyped;
 };
type GetTransactionsResult = 
 record {
   archived_blocks: vec ArchivedTransactionResponse;
   blocks: vec record {
                 block: Value;
                 id: nat;
               };
   log_length: nat;
 };
type GetTransactionsFn = func (vec TransactionRange) ->
                          (GetTransactionsResult) query;
type ArchivedTransactionResponse = 
 record {
   args: vec TransactionRange;
   callback: GetTransactionsFn;
 };
type ArchiveInitArgs = 
 record {
   firstIndex: nat;
   indexType: IndexType;
   maxPages: nat;
   maxRecords: nat;
 };
type Archive = 
 service {
   append_transactions: (vec Transaction) -> (AddTransactionsResponse);
   /// Get the remaining cylces on the server
   cycles: () -> (nat) query;
   /// Deposit cycles into this archive canister.
   deposit_cycles: () -> ();
   get_transaction: (TxIndex) -> (opt Transaction) query;
   icrc3_get_blocks: (vec TransactionRange) -> (GetTransactionsResult) query;
   remaining_capacity: () -> (nat) query;
   total_transactions: () -> (nat) query;
 };
type AddTransactionsResponse = 
 variant {
   Full: Stats;
   err: text;
   ok: Stats;
 };
service : (ArchiveInitArgs) -> Archive

type CanisterArg = record {
  icrc7_supply_cap : nat;
  icrc7_description : opt text;
  tx_window : opt nat64;
  icrc7_max_query_batch_size : opt nat;
  permitted_drift : opt nat64;
  icrc7_max_take_value : opt nat;
  icrc7_max_memo_size : opt nat;
  icrc7_symbol : text;
  icrc7_max_update_batch_size : opt nat;
  icrc7_atomic_batch_transfers : opt bool;
  icrc7_default_take_value : opt nat;
  icrc7_logo : opt text;
  icrc7_name : text;
};

type NftMetadata = record {
  token_name: text;
  token_privilege_code: nat8;
  token_description: text;
  token_logo: text;
  quantity: nat64;
  price: nat32;
};

type Errors = variant {
  GenericError : record { message : text; error_code : nat };
  SupplyCapReached;
  TokenIdMinimumLimit;
  Unauthorized;
  GenericBatchError : record { message : text; error_code : nat };
  TokenIdAlreadyExist;
};

type TransferError = variant {
  GenericError : record { message : text; error_code : nat };
  Duplicate : record { duplicate_of : nat };
  NonExistingTokenId;
  Unauthorized;
  CreatedInFuture : record { ledger_time : nat64 };
  InvalidRecipient;
  GenericBatchError : record { message : text; error_code : nat };
  TooOld;
};

type DiscountWindowArg = record { 
  expire_date: nat64; 
  discount_percentage: nat8; 
};

type CanisterFullInfo = record {
    owner: principal;
    canister_id: principal;
    expire_date: nat64;
    discount_windows: vec DiscountWindowArg;
    available: bool;
    nfts: vec record {nft: NftMetadata; tkn_ids: vec nat64};
};

type Arg = record {
  canister_arg : CanisterArg;
  nfts : vec NftMetadata;
  expire_date : nat64;
  discount_windows: vec DiscountWindowArg;
};

type Tokens = record {
  e8s : nat64;
};

type SubAccount = blob;
type Account = record { owner : principal; subaccount : opt SubAccount };

type TransferArgs = record { 
  amount : nat; 
  tkn_id : nat;
  collection_id : text;
};

type OwnersDoubleKey = record {
  collection_id: principal;
  tkn_id: nat64;
};

type NftMarketData = record {
  owner: principal;
  price: opt nat32;
  on_sale: bool;
};

service : { 
  create_collection_nfts : (arg: Arg) -> (variant { Ok : text; Err : Errors });
  get_collection_ids : (caller: opt text, offset: nat32, limit: nat32) -> (variant { Ok : vec text; Err : text });
  get_all_collections_by_caller : (caller: opt text, offset: nat32, limit: nat32) -> (variant { Ok : vec CanisterFullInfo; Err: text});
  get_all_collections : (offset: nat32, limit: nat32) -> (variant { Ok : vec CanisterFullInfo; Err: text});
  get_collection_viability : (canister_id: principal) -> (variant { Ok : bool; Err: text});
  get_all_nfts : (offset: nat32, limit: nat32) -> (variant { Ok : vec record { OwnersDoubleKey; NftMarketData }; Err: text});
  transfer_nft : (args: TransferArgs) ->  (variant { Ok : text; Err : text });
  check_balance : (owner: opt text, tkn_id: nat64, collection_id: text) ->  (variant { Ok : nat; Err : text }) composite_query;
}

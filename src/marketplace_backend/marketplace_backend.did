type CanisterArg = record {
  icrc7_supply_cap : nat;
  icrc7_description : opt text;
  tx_window : opt nat64;
  icrc7_max_query_batch_size : opt nat;
  permitted_drift : opt nat64;
  icrc7_max_take_value : opt nat;
  icrc7_max_memo_size : opt nat;
  icrc7_symbol : text;
  icrc7_max_update_batch_size : opt nat;
  icrc7_atomic_batch_transfers : opt bool;
  icrc7_default_take_value : opt nat;
  icrc7_logo : opt text;
  icrc7_name : text;
};

type NftMetadata = record {
  token_name: text;
  token_privilege_code: nat8;
  token_description: text;
  token_logo: text;
  quantity: nat;
};

type Errors = variant {
  GenericError : record { message : text; error_code : nat };
  SupplyCapReached;
  TokenIdMinimumLimit;
  Unauthorized;
  GenericBatchError : record { message : text; error_code : nat };
  TokenIdAlreadyExist;
};

type DiscountWindowArg = record { 
  expire_date: nat64; 
  discount_percentage: nat8; 
};

type Arg = record {
  canister_arg : CanisterArg;
  nfts : vec NftMetadata;
  expire_date : nat64;
  discount_windows: vec DiscountWindowArg;
};

service : { 
  create_collection_nfts : (Arg) -> (variant { Ok : text; Err : Errors });
  get_canister_ids : (opt text) -> (variant { Ok : vec text; Err : text });
}
